import os, shutil
[metadata]
name = setup.cfg
version = 001
author = USArmyResearchLab
author-email = Dshell is a network forensic analysis framework. 
summary = Reads a distributions's metadata from its setup.cfg file and passes it to setuptools.setup()
description-file =
    README.md
 
home-page = https://github.com/USArmyResearchLab/Dshell
requires-dist = setuptools pkgutil Crypto dpkt IPy pcap
classifier = 
    Development Status :: 5 - Production/Stable
	Environment :: Plugins
	Framework :: Setuptools Plugin
	Intended Audience :: Developers
	License :: OSI Approved :: BSD License
	Operating System :: OS Independent
	Programming Language :: Python
	Programming Language :: Python :: 2
	Topic :: Software Development :: Build Tools
	Topic :: Software Development :: Libraries :: Python Modules
	Topic :: System :: Archiving :: Packaging

[files]
packages =
    setup
    setup.cfg
    etup.cfg.externs
extra_files =
    LICENSE.txt
  

[backwards_compat]
zip-safe = true
tests-require = nose

[entry_points]
distutils.setup_keywords = 
	setup_cfg = setup.cfg.core:setup_cfg
zest.releaser.prereleaser.middle = 
	d2_version = setup.cfg.zestreleaser:prereleaser_middle
zest.releaser.postreleaser.middle = 
	d2_version = setup.cfg.zestreleaser:postreleaser_middle

[test]
test-suite = nose.collector

[zest.releaser]
# These zest.releaser hooks are not installed as entry points as they are only
# used for setup.cfg itself--the ones that are installed as entry points are
# useful to any project that uses setup.cfg
releaser.middle = setup.cfg.zestreleaser.releaser_middle
postreleaser.before = setup.cfg.zestreleaser.postreleaser_before
[build_ext]
inplace=1  
[bbdist_bztar]
[bdist_rpm]
release = 1
packager = Greg Ward <gward@python.net>
doc_files = CHANGES.txt
            README.txt
            USAGE.txt
            doc/
            examples/

        
[files]
resources =
     README = {doc}
     scripts/ LAUNCH = {doc}
     scripts/ *.sh = {scripts}
     doc/ * = {doc}
     doc/ man = {man}
    share/ share=
     decoders
[sdist]
manifest-builders = package.module.Maker
[build_py]
use-2to3 = True
[install] 
prefix=/opt/Dshell
install_lib=/lib
install_scripts=/opt/Dshell/bin/
install_share= {
os.symlink('/usr/share/GeoIP/', '/opt/Dshell/share')
} #Gentoo and many distos if Exsists and or via pkg installer 
## this is were the maxmind geoip files go or are downloaded to via symbolic links. 
}


#DESTDIR = $(/usr/bin/Dshell)
#DESTDIR="${D}" 
#SOURCEDIR = $(PWD)
#INSTALL = /usr/sbin/install
#.PHONY mklink
install_doc=/opt/Dshell/doc && os.symlink('/opt/Dshell/doc', '/usr/share/doc/Dshell/')
#mklink:
 #   test -e /usr/share/GeoIP/*.* || exit 1
 #   cp -s /usr/share/GeoIP/*.*  /usr/bin/Dshell/share/GeoIP  # copy symlinks 
default: all

all: rc dshell

dshell: rc initpy pydoc

rc:
	# Generating .dshellrc and dshell files 
	python $(PWD)/bin/generate-dshellrc.py $(PWD)
	chmod 755 $(PWD)/dshell
	chmod 755 $(PWD)/dshell-decode
	chmod 755 $(PWD)/bin/decode.py
	ln -s $(PWD)/bin/decode.py $(PWD)/bin/decode

initpy:
	find $(PWD)/decoders -type d -not -path \*.svn\* -print -exec touch {}/__init__.py \;

pydoc:
	(cd $(PWD)/doc && ./generate-doc.sh $(PWD) ) 

clean: clean_pyc 

distclean: clean clean_py clean_pydoc clean_rc
	
clean_rc:
	rm -fv $(PWD)/dshell
	rm -fv $(PWD)/dshell-decode
	rm -fv $(PWD)/.dshellrc
	rm -fv $(PWD)/bin/decode 

clean_py:
	find $(PWD)/decoders -name '__init__.py' -exec rm -v {} \;

clean_pyc:
	find $(PWD)/decoders -name '*.pyc' -exec rm -v {} \;
	find $(PWD)/lib -name '*.pyc' -exec rm -v {} \;

clean_pydoc:
	find $(PWD)/doc -name '*.htm*' -exec rm -v {} \;

#clean_install_dir_extras:
#	rm -rv ${D}/docker/
#	rm -fv ${D}.git/
