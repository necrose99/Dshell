# https://stackoverflow.com/questions/1950926/create-directories-using-make-file
# /opt/dshell wasnt creating under emake for gentoo... sandbox , granded I'll have to replace some files... 
MKDIR_P = mkdir -p

.PHONY: directories

all: directories program 
## recursive make-of-tree 
directories: ${DESTDIR} ${DESTDIR}/dshell {DESTDIR}/bin {DESTDIR}/dshell-decode {DESTDIR}/lib {DESTDIR}/doc {DESTDIR}/share/GeoIP

${DESTDIR}:
        ${MKDIR_P} ${DESTDIR}

USER=$(shell id -u)

ifeq ($(USER),0)
	# As root, install Dshell systemwide
	DESTDIR=/opt/dshell
	DESTPERMS=755
	SYMLINKDIR=/usr/bin
	ln-s {DESTDIR}/doc /usr/share/doc/dshell/  # Link docs to usual location/s. 
	## TODO...
	#cat-df-dhsell.sh /etc/skell/dshell/  
	# add skell , ie /home/someuser/.dshell/dshellrc etc..  ../plugins , etc , include dhsellrc main , and user folder editable perms.
        # skell can populate to user/s and or dammeons.  adds back some user only install... , ie plugins user mode folders.. 
	 
else
	# As a normal user, build Dshell locally
	DESTDIR=$(PWD)
	DESTPERMS=700
	SYMLINKDIR=$(HOME)
endif

default: dshell

dshell: rc initpy pydoc

clean: clean_pyc clean_initpy clean_pydoc clean_rc

uninstall: uninstall_main uninstall_symlinks

install: install_dshell dshell install_symlinks

install_dshell:
	# Copying files to DESTDIR
	$(info Installing Dshell in $(DESTDIR))
	mkdir -m $(DESTPERMS) -p $(DESTDIR){$(DESTDIR/bin 
	rsync -va . $(DESTDIR) --exclude install/ --exclude dshell --exclude dshell-decode --exclude install-ubuntu.py

rc:
	# Generating .dshellrc and dshell files
	python $(DESTDIR)/bin/generate-dshellrc.py $(DESTDIR)
	chmod 755 $(DESTDIR)/dshell
	chmod 755 $ 
	chmod 755 $(DESTDIR)/bin/decode.py
	ln -fvs $(DESTDIR)/bin/decode.py $(DESTDIR)/bin/decode

clean_rc:
	# Cleaning the files generated by 'rc'
	rm -fv $(DESTDIR)/dshell
	rm -fv $(DESTDIR)/dshell-decode
	rm -fv $(DESTDIR)/.dshellrc
	rm -fv $(DESTDIR)/bin/decode

initpy:
	# Creating the __init__.py files in the decoder paths
	find $(DESTDIR)/decoders -type d -not -path \*.svn\* -print -exec touch {}/__init__.py \;

clean_initpy:
	# Cleaning the __init__.py files in the decoder paths
	find $(DESTDIR)/decoders -name '__init__.py' -exec rm -v {} \;

pydoc:
	# Using pydoc to generate library documentation
	(cd $(DESTDIR)/doc && ./generate-doc.sh $(DESTDIR) )

clean_pydoc:
	# Cleaning the documentation generated by pydoc
	find $(DESTDIR)/doc -name '*.htm*' -exec rm -v {} \;

clean_pyc:
	# Cleaning any generated .pyc files
	find $(DESTDIR)/decoders -name '*.pyc' -exec rm -v {} \;
	find $(DESTDIR)/lib -name '*.pyc' -exec rm -v {} \;

install_symlinks:
	# Creating symlinks to 'dshell' and 'dshell-decode'
	ln -fvs $(DESTDIR)/dshell $(SYMLINKDIR)/dshell
	ln -fvs $(DESTDIR)/dshell-decode $(SYMLINKDIR)/dshell-decode

uninstall_symlinks:
	# Removing symlinks to 'dshell' and 'dshell-decode'
	rm -fv $(SYMLINKDIR)/dshell
	rm -fv $(SYMLINKDIR)/dshell-decode

uninstall_main:
	rm -rv $(DESTDIR)
